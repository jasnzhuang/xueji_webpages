@using System.Globalization
@functions{

    public static string JudgeAvaliable(int status,int id)
    {
        string htmlMessage;
        if (status==1)
        {
            htmlMessage = "<a href='library_borrowing.cshtml?id=" + id + "'>借出</a>";
        }else if (status == 2)
        {
            htmlMessage = "<a href='library_return.cshtml?id=" + id + "'>归还</a>";
        }
        else
        {
            htmlMessage = "状态异常";
        }
        return htmlMessage;
    }

    public static int GetAvaliableAmounts(int id)
    {
        int avaliableAmounts;
        var db = Database.Open("startersite");
        const string queryCommand = "SELECT Count(*) AS amounts FROM library_collections AS lc WHERE lc.library_books_id = @0 AND lc.status = 1";
        var getamounts = db.QuerySingle(queryCommand,id);
        avaliableAmounts = getamounts.amounts;
        return avaliableAmounts;
    }

    public static string GetBookStatus(int status)
    {
        string statustext;
        switch (status)
        {
            case 1:
                statustext = "可借阅";
                break;
            case 2:
                statustext = "已借出";
                break;
            default:
                statustext = "wrong!";
                break;
        }
        return statustext;
    }

    public static string GetTeachersType(int teachers_type)
    {
        string typename;
        switch (teachers_type)
        {
            case 1:
                typename = "辅导员";
                break;
            case 2:
                typename = "讲师";
                break;
            default:
                typename = "wrong!";
                break;
        }
        return typename;
    }

    public static string GetClassesName(int classes_id)
    {
        string classesname;
        if (classes_id <= 0)
        {
            classesname = "";
        }
        else
        {
            //本部分目前有BUG，就是没有判断处理当classes表中没有对应classes.id记录的时候，将会取得一个null值，并且爆粗
            var db = Database.Open("startersite");
            var queryCommand = "select classes.id,classes.classes_year as classes_year,majors.majors_name as majors_name from classes join majors on classes.majors_id=majors.id where classes.id=" + classes_id;
            var getname = db.QuerySingle(queryCommand);
            classesname = getname.classes_year + getname.majors_name;
        }

        return classesname;
    }

    public static string PutCopyright()
    {
        var PutCopyright = "&copy; 2017 -  <a href='#' alt='Using the Bootstrap Metro Dashboard Form Template'>沈阳理工大学继续教育学院 博众教学部 指导教师率17编码小分队</a>";
        return PutCopyright;
    }

    public static string PutDate()
    {
        var putDate = DateTime.Now;
        return putDate.ToString(CultureInfo.InvariantCulture);
    }

    public static string GetExamType(int exams_type)
    {
        string typename;
        switch (exams_type)
        {
            case 1:
                typename = "期末考试";
                break;
            case 2:
                typename = "期中考试";
                break;
            case 3:
                typename = "月考";
                break;
            case 4:
                typename = "周考";
                break;
            case 5:
                typename = "随堂测验";
                break;
            case 6:
                typename = "成人高考";
                break;
            case 7:
                typename = "自学考试";
                break;
            case 8:
                typename = "成人专升本";
                break;
            case 9:
                typename = "自考专升本";
                break;
            case 10:
                typename = "大学英语四级";
                break;
            case 11:
                typename = "学位英语";
                break;
            default:
                typename = "wrong!";
                break;
        }
        return typename;
    }

}